{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/account.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/common\";\nfunction AccountComponent_div_2_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const transaction_r3 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Transaction Amount: \", transaction_r3.amount, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Transaction Type: \", transaction_r3.type, \"\");\n  }\n}\nfunction AccountComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, AccountComponent_div_2_div_5_Template, 5, 2, \"div\", 0);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const account_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Name: \", account_r1.accountHolderName, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Balance: R\", account_r1.balance, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", account_r1.transactions);\n  }\n}\nexport class AccountComponent {\n  constructor(accountService, fb) {\n    this.accountService = accountService;\n    this.fb = fb;\n    this.accounts = [];\n  }\n  showAccount() {\n    this.accountService.getAccounts().subscribe({\n      next: data => {\n        this.accounts = data;\n        console.log('Accounts received:', this.accounts);\n      },\n      error: err => {\n        console.error('Failed to fetch accounts:', err);\n      }\n    });\n  }\n  createAccount() {\n    if (this.accountForm.valid) {\n      const account = this.accountForm.value;\n      console.log('New Account: ', account);\n      this.accountService.createAccount(account).subscribe({\n        next: data => {\n          console.log(\"Account successfully added!\", data);\n        },\n        error: err => {\n          console.error('Failed to create Account', err);\n        }\n      });\n    }\n  }\n  ngOnInit() {\n    // this.showAccount();\n    this.accountForm = this.fb.group({\n      accountHolderName: ['', Validators.required],\n      balance: [0],\n      userId: [4],\n      transactions: [[]]\n    });\n  }\n  static {\n    this.ɵfac = function AccountComponent_Factory(t) {\n      return new (t || AccountComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AccountComponent,\n      selectors: [[\"app-account\"]],\n      decls: 3,\n      vars: 1,\n      consts: [[4, \"ngFor\", \"ngForOf\"]],\n      template: function AccountComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h1\");\n          i0.ɵɵtext(1, \"Accounts\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(2, AccountComponent_div_2_Template, 6, 3, \"div\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.accounts);\n        }\n      },\n      dependencies: [i3.NgForOf],\n      styles: [\"/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhY2NvdW50LmNvbXBvbmVudC5zY3NzIn0= */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9hY2NvdW50L2FjY291bnQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG9LQUFvSyIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","transaction_r3","amount","type","ɵɵtemplate","AccountComponent_div_2_div_5_Template","account_r1","accountHolderName","balance","ɵɵproperty","transactions","AccountComponent","constructor","accountService","fb","accounts","showAccount","getAccounts","subscribe","next","data","console","log","error","err","createAccount","accountForm","valid","account","value","ngOnInit","group","required","userId","ɵɵdirectiveInject","i1","AccountService","i2","FormBuilder","selectors","decls","vars","consts","template","AccountComponent_Template","rf","ctx","AccountComponent_div_2_Template"],"sources":["C:\\Users\\lkama\\IdeaProjects\\banking-ui\\src\\app\\components\\account\\account.component.ts","C:\\Users\\lkama\\IdeaProjects\\banking-ui\\src\\app\\components\\account\\account.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Account } from 'src/app/models/account.model';\nimport { AccountService } from 'src/app/services/account.service';\n\n@Component({\n  selector: 'app-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.scss']\n})\nexport class AccountComponent implements OnInit {\n    accountForm: FormGroup;\n    accounts: Account[] = [];\n    \n    \n    constructor(private accountService: AccountService, private fb: FormBuilder){}\n    \n\n    showAccount() {\n    this.accountService.getAccounts().subscribe({\n      next: data => {\n        this.accounts = data;\n        console.log('Accounts received:', this.accounts);\n      },\n      error: err => {\n        console.error('Failed to fetch accounts:', err);\n      }\n    });\n  }\n\n    createAccount(){\n      if (this.accountForm.valid){\n        const account: Account = this.accountForm.value;\n        console.log('New Account: ', account);\n        this.accountService.createAccount(account).subscribe({\n          next: data => {\n            console.log(\"Account successfully added!\", data);\n          },\n          error: err => {\n          console.error('Failed to create Account', err);\n        }\n        })\n      }\n    }\n\n    ngOnInit(): void {\n        // this.showAccount();\n        this.accountForm = this.fb.group({\n        accountHolderName: ['', Validators.required],\n        balance: [0],\n        userId: [4],\n        transactions: [[]],\n      });\n    }\n\n}\n","<h1>Accounts</h1>\n\n<div *ngFor=\"let account of accounts\">\n    <div> Name: {{account.accountHolderName}} </div>\n    <div> Balance: R{{account.balance}} </div>\n    <div *ngFor=\"let transaction of account.transactions\">\n        <div> Transaction Amount: {{transaction.amount}}</div>\n        <div> Transaction Type: {{transaction.type}}</div>\n    </div>\n</div>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}